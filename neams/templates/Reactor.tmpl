			%Reactor is a simple, general reactor based on static compositional 
			%transformations to model fuel burnup.  The user specifies 
			%a set of input fuels and corresponding burnt compositions 
			%that fuel is transformed to when it is discharged from the 
			%core.  No incremental transmutation takes place. Rather, at 
			%the end of an operational cycle, the batch being discharged 
			%from the core is instantaneously transmuted from its original 
			%fresh fuel composition into its spent fuel form.
			%
			%Each fuel 
			%is identified by a specific input commodity and has an associated 
			%input recipe (nuclide composition), output recipe, 
			%output commidity, and preference.  The preference identifies 
			%which input fuels are preferred when requesting.  Changes in 
			%these preferences can be specified as a function of time using 
			%the pref_change variables.  Changes in the input-output 
			%recipe compositions can also be specified as a function of 
			%time using the recipe_change variables.
			%
			%The reactor treats 
			%fuel as individual assemblies that are never split, combined 
			%or otherwise treated in any non-discrete way.  Fuel is requested 
			%in full-or-nothing assembly sized quanta.  If real-world 
			%assembly modeling is unnecessary, parameters can be adjusted 
			%(e.g. n_assem_core, assem_size, n_assem_batch).  At the 
			%end of every cycle, a full batch is discharged from the core 
			%consisting of n_assem_batch assemblies of assem_size kg. The 
			%reactor also has a specifiable refueling time period following 
			%the end of each cycle at the end of which it will resume 
			%operation on the next cycle *if* it has enough fuel for a 
			%full core; otherwise it waits until it has enough fresh fuel 
			%assemblies.
			%
			%In addition to its core, the reactor has an on-hand 
			%fresh fuel inventory and a spent fuel inventory whose 
			%capacities are specified by n_assem_fresh and n_assem_spent 
			%respectively.  Each time step the reactor will attempt to acquire 
			%enough fresh fuel to fill its fresh fuel inventory (and 
			%its core if the core isn't currently full).  If the fresh 
			%fuel inventory has zero capacity, fuel will be ordered just-in-time 
			%after the end of each operational cycle before the next 
			%begins.  If the spent fuel inventory becomes full, the reactor 
			%will halt operation at the end of the next cycle until 
			%there is more room.  Each time step, the reactor will try 
			%to trade away as much of its spent fuel inventory as possible.
			%
			%When 
			%the reactor reaches the end of its lifetime, it will 
			%discharge all material from its core and trade away all its 
			%spent fuel as quickly as possible.  Full decommissioning will 
			%be delayed until all spent fuel is gone.  If the reactor 
			%has a full core when it is decommissioned (i.e. is mid-cycle) 
			%when the reactor is decommissioned, half (rounded up to nearest 
			%int) of its assemblies are transmuted to their respective 
			%burnt compositions.
			%
			%(optional) Mass (kg) of a single assembly.
			assem_size {}
			%(optional) Number of time steps since the start of the last cycle. 
			%Only set this if you know what you are doing
			cycle_step {}
			%(optional) The duration of a full operational cycle (excluding 
			%refueling time) in time steps.
			cycle_time {}
			%(optional) If true, the archetype transmutes all assemblies upon 
			%decommissioning If false, the archetype only transmutes 
			%half.
			decom_transmute_all {}
			%(optional) Ordered list of input commodities on which to requesting 
			%fuel.
			fuel_incommods {val {}}
			%(optional) Fresh fuel recipes to request for each of the given 
			%fuel input commodities (same order).
			fuel_inrecipes {val {}}
			%(optional) Output commodities on which to offer spent fuel originally 
			%received as each particular input commodity (same 
			%order).
			fuel_outcommods {val {}}
			%(optional) Spent fuel recipes corresponding to the given fuel 
			%input commodities (same order). Fuel received via a particular 
			%input commodity is transmuted to the recipe specified here 
			%after being burned during a cycle.
			fuel_outrecipes {val {}}
			%(optional) The preference for each type of fresh fuel requested 
			%corresponding to each input commodity (same order).  If no 
			%preferences are specified, 1.0 is used for all fuel requests 
			%(default).
			fuel_prefs {val {}}
			%(optional) Latitude of the agent's geographical position. The 
			%value should be expressed in degrees as a double.
			latitude {}
			%(optional) Longitude of the agent's geographical position. The 
			%value should be expressed in degrees as a double.
			longitude {}
			%(optional) Number of assemblies that constitute a single batch. 
			% This is the number of assemblies discharged from the core 
			%fully burned each cycle.Batch size is equivalent to ``n_assem_batch 
			%/ n_assem_core``.
			n_assem_batch {}
			%(optional) Number of assemblies that constitute a full core.
			%
			n_assem_core {}
			%(optional) Number of fresh fuel assemblies to keep on-hand if 
			%possible.
			n_assem_fresh {}
			%(optional) Number of spent fuel assemblies that can be stored 
			%on-site before reactor operation stalls.
			n_assem_spent {}
			%(optional) Amount of electrical power the facility produces when 
			%operating normally.
			power_cap {}
			%(optional) The name of the 'power' commodity used in conjunction 
			%with a deployment curve.
			power_name {}
			%(optional) The input commodity for a particular fuel preference 
			%change.  Same order as and direct correspondence to the specified 
			%preference change times.
			pref_change_commods {val {}}
			%(optional) A time step on which to change the request preference 
			%for a particular fresh fuel type.
			pref_change_times {val {}}
			%(optional) The new/changed request preference for a particular 
			%fresh fuel. Same order as and direct correspondence to the 
			%specified preference change times.
			pref_change_values {val {}}
			%(optional) The input commodity indicating fresh fuel for which 
			%recipes will be changed. Same order as and direct correspondence 
			%to the specified recipe change times.
			recipe_change_commods {val {}}
			%(optional) The new input recipe to use for this recipe change. 
			%Same order as and direct correspondence to the specified recipe 
			%change times.
			recipe_change_in {val {}}
			%(optional) The new output recipe to use for this recipe change. 
			%Same order as and direct correspondence to the specified 
			%recipe change times.
			recipe_change_out {val {}}
			%(optional) A time step on which to change the input-output recipe 
			%pair for a requested fresh fuel.
			recipe_change_times {val {}}
			%(optional) The duration of a full refueling period - the minimum 
			%time between the end of a cycle and the start of the next 
			%cycle.
			refuel_time {}
			%(optional) Ordered vector of the quantity of side product the 
			%reactor produces with power
			side_product_quantity {val {}}
			%(optional) Ordered vector of side product the reactor produces 
			%with power
			side_products {val {}}